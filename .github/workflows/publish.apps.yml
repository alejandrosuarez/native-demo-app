name: Build and Publish WebdriverIO Native Demo Apps

on:
  workflow_dispatch:
    inputs:
      releaseType:
        description: 'Release type - major, minor or patch'
        required: true
        default: 'patch'
    
jobs:
  ReleaseBuild:
    runs-on: macos-latest
    
    strategy:
      fail-fast: true
      matrix:
        node-version: [20.x]
        java-version: [17.x]
        java-distribution: [zulu]
    
    steps:

      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v3

    #   - name: 🌲 Setup Git
    #     run: |
    #       git config --global user.email "bot@webdriver.io"
    #       git config --global user.name "WebdriverIO Release Bot"
      
    #   - name: ☕ Setup Java
    #     uses: actions/setup-java@v4
    #     with:
    #         distribution: ${{ matrix.java-distribution }}
    #         java-version: ${{ matrix.java-version }}
      
    #   - name: 🤖 Setup Android SDK
    #     uses: android-actions/setup-android@v3

    #   - name: 🟢 Setup Node.js ${{ matrix.node-version }}
    #     uses: actions/setup-node@v3
    #     with:
    #       node-version: ${{ matrix.node-version }}

    #   - name: 🧩 Install Dependencies
    #     run: npm ci

      - name: 🔍 Get current version from package.json
        run: echo "CURRENT_VERSION=$(cat package.json | jq -r '.version')" >> $GITHUB_ENV
    
      - name: Debugging variables
        run: |
          echo "Current version: $CURRENT_VERSION"
          IFS='.' read -ra VER <<< "$CURRENT_VERSION"
          echo "Parsed version array: ${VER[*]}"
      
      - name: Calculate new version
        run: |
          IFS='.' read -ra VER <<< "$CURRENT_VERSION"
          if [ "${{ github.event.inputs.releaseType }}" == "major" ]; then
            let VER[0]++
            VER[1]=0
            VER[2]=0
          elif [ "${{ github.event.inputs.releaseType }}" == "minor" ]; then
            let VER[1]++
            VER[2]=0
          elif [ "${{ github.event.inputs.releaseType }}" == "patch" ]; then
            let VER[2]++
          fi
          NEW_VERSION="${VER[0]}.${VER[1]}.${VER[2]}"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

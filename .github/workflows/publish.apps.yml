name: Build and Publish WebdriverIO Native Demo Apps

on:
  workflow_dispatch:
    inputs:
      releaseType:
        description: 'Release type - major, minor or patch'
        required: true
        default: 'patch'

jobs:
  prepare_release:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.set_new_version.outputs.new_version }}
    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v3

      - name: 🌲 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: 🧩 Install Dependencies
        run: npm ci

      - name: 🔄 Increment Version and Build Number
        id: set_new_version
        run: |
          NEW_VERSION=$(npm version ${{ github.event.inputs.releaseType }} --no-git-tag-version)
          echo "New version: $NEW_VERSION"
          echo "::set-output name=new_version::$NEW_VERSION"
          npm run build.versions

      - name: 🌿 Create Pre-Release Branch
        run: |
          git checkout -b pre-release
          git add .
          git commit -m "chore: Preparing for release $NEW_VERSION"
          git push origin pre-release

  android_build:
    needs: prepare_release
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout Pre-Release Branch
        uses: actions/checkout@v3
        with:
          ref: pre-release

      - name: ☕ Setup Java and Android SDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17.x'

      - name: 🌲 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: 🧩 Install Dependencies
        run: npm ci

      - name: 🔢 Set Version and Build Number
        run: |
          npm version ${{ github.event.inputs.releaseType }} --no-git-tag-version
          npm run build.versions

      - name: 🏗️ Build Android Release
        run: npm run android.release

      - name: 📦 Move 🤖 Android Build
        run: mv android/app/build/outputs/apk/release/app-release.apk android.wdio.native.app.${{ env.NEW_VERSION }}.apk

      - name: 📤 Upload Android App
        uses: actions/upload-artifact@v3
        with:
          name: android.wdio.native.app.${{ needs.prepare_release.outputs.new_version }}.apk
          path: android.wdio.native.app.${{ needs.prepare_release.outputs.new_version }}.apk

  ios_build:
    needs: prepare_release
    runs-on: macos-latest
    steps:
      - name: ⬇️ Checkout Pre-Release Branch
        uses: actions/checkout@v3
        with:
          ref: pre-release

      - name: 🌲 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: 🧩 Install Dependencies
        run: npm ci

      - name: 🔢 Set Version and Build Number
        run: |
          npm version ${{ github.event.inputs.releaseType }} --no-git-tag-version
          npm run build.versions

      - name: 🏗️ Build iOS Release
        run: npm run ios.release.sim.build

      - name: 📦 Zip and move iOS Simulator Build
        run: |
          mkdir Payload
          cp -R **/Build/Products/Release-iphonesimulator/**/*.app Payload
          zip -9 -r ios.simulator.wdio.native.app.${{ needs.prepare_release.outputs.new_version }}.zip Payload
          rm -rf Payload

      - name: 📤 Upload iOS App
        uses: actions/upload-artifact@v3
        with:
          name: ios.simulator.wdio.native.app.${{ needs.prepare_release.outputs.new_version }}.zip
          path: ios.simulator.wdio.native.app.${{ needs.prepare_release.outputs.new_version }}.zip

  finalize:
    needs: [android_build, ios_build]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: ⬇️ Checkout Pre-Release Branch
        uses: actions/checkout@v3
        with:
          ref: pre-release

      - name: 🔖 Tag New Release
        run: |
          git tag -a "v${{ needs.prepare_release.outputs.new_version }}" -m "Release v${{ needs.prepare_release.outputs.new_version }}"
          git push origin "v${{ needs.prepare_release.outputs.new_version }}"

      - name: 🔀 Merge Pre-Release to Main
        run: |
          git fetch
          git checkout main
          git merge --no-ff pre-release -m "Merging pre-release to main: Release v${{ needs.prepare_release.outputs.new_version }}"
          git push origin main

      - name: 🚀 Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.prepare_release.outputs.new_version }}
          release_name: Release v${{ needs.prepare_release.outputs.new_version }}
          draft: false
          prerelease: false

      - name: 📤 Upload Artifacts to Release
        run: |
          ASSET_URL=${{ steps.create_release.outputs.upload_url }}
          echo "Uploading Android App..."
          curl \
            -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: $(file -b --mime-type ./android.wdio.native.app.${{ needs.prepare_release.outputs.new_version }}.apk)" \
            --data-binary @./android.wdio.native.app.${{ needs.prepare_release.outputs.new_version }}.apk \
            "$ASSET_URL?name=android.wdio.native.app.${{ needs.prepare_release.outputs.new_version }}.apk"
            
          echo "Uploading iOS App..."
          curl \
            -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: $(file -b --mime-type ./ios.simulator.wdio.native.app.${{ needs.prepare_release.outputs.new_version }}.zip)" \
            --data-binary @./ios.simulator.wdio.native.app.${{ needs.prepare_release.outputs.new_version }}.zip \
            "$ASSET_URL?name=ios.simulator.wdio.native.app.${{ needs.prepare_release.outputs.new_version }}.zip"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
